name: Unified Release

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+*'  # Matches v0.1.1, v1.0.0, v0.1.2-beta, etc.
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag (e.g., v0.1.1)'
        required: true
        type: string

env:
  REGISTRY: docker.io
  IMAGE_NAME: cheolwanpark/claude-agent-toolkit

permissions:
  id-token: write
  contents: read

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Extract version from tag
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ inputs.version }}"
        else
          VERSION="${GITHUB_REF#refs/tags/}"
        fi
        # Remove 'v' prefix for Docker tag
        VERSION_NO_V="${VERSION#v}"
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "version_no_v=${VERSION_NO_V}" >> $GITHUB_OUTPUT
        echo "Version: ${VERSION}, Version without v: ${VERSION_NO_V}"

    # Python Package Build and Publish
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Build Python package
      run: |
        python -m pip install build
        python -m build

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1

    # Docker Image Build and Publish
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Extract Docker metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.IMAGE_NAME }}
        tags: |
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}.{{patch}}
          type=raw,value={{tag}},enable={{is_default_branch}}

    - name: Debug metadata outputs and create fallback tags
      id: tags
      run: |
        echo "Generated tags: ${{ steps.meta.outputs.tags }}"
        echo "Generated labels: ${{ steps.meta.outputs.labels }}"
        echo "Raw tag: ${{ github.ref_name }}"
        
        # Check if metadata action generated any tags
        METADATA_TAGS="${{ steps.meta.outputs.tags }}"
        METADATA_LABELS="${{ steps.meta.outputs.labels }}"
        
        if [ -z "$METADATA_TAGS" ]; then
          echo "❌ No tags generated by metadata action! Creating fallback tags..."
          
          # Extract version without 'v' prefix for Docker tag
          VERSION="${{ steps.version.outputs.version_no_v }}"
          FALLBACK_TAGS="${{ env.IMAGE_NAME }}:${VERSION}"
          FALLBACK_LABELS="org.opencontainers.image.version=${VERSION}"
          
          echo "Fallback tags: ${FALLBACK_TAGS}"
          echo "Fallback labels: ${FALLBACK_LABELS}"
          
          # Set outputs for use in Docker build
          echo "final_tags=${FALLBACK_TAGS}" >> $GITHUB_OUTPUT
          echo "final_labels=${FALLBACK_LABELS}" >> $GITHUB_OUTPUT
          echo "using_fallback=true" >> $GITHUB_OUTPUT
        else
          echo "✅ Tags generated successfully by metadata action"
          {
            echo "final_tags<<EOF"
            echo "${METADATA_TAGS}"
            echo "EOF"
          } >> $GITHUB_OUTPUT
          {
            echo "final_labels<<EOF"
            echo "${METADATA_LABELS}"
            echo "EOF"
          } >> $GITHUB_OUTPUT
          echo "using_fallback=false" >> $GITHUB_OUTPUT
        fi

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./src/docker
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.tags.outputs.final_tags }}
        labels: ${{ steps.tags.outputs.final_labels }}
        build-args: |
          VERSION=${{ steps.version.outputs.version_no_v }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Report build method
      run: |
        if [ "${{ steps.tags.outputs.using_fallback }}" = "true" ]; then
          echo "🔄 Used fallback tag generation for pre-release version"
        else
          echo "✅ Used metadata action for tag generation"
        fi

    # Verification
    - name: Verify release
      run: |
        echo "✅ Released version: ${{ steps.version.outputs.version }}"
        echo "✅ PyPI package: claude-agent-toolkit==${{ steps.version.outputs.version_no_v }}"
        echo "✅ Docker images:"
        echo "   - ${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version_no_v }}"
        
        # Extract major.minor for the additional tag
        VERSION_NO_V="${{ steps.version.outputs.version_no_v }}"
        MAJOR_MINOR=$(echo "${VERSION_NO_V}" | cut -d'.' -f1,2)
        echo "   - ${{ env.IMAGE_NAME }}:${MAJOR_MINOR}"